{"version":3,"sources":["features/StaticSection/StaticSection.module.css","features/StaticSection/index.js","app/routes/Home.js","app/routes/Deck.js","app/routes/Options.js","app/routes/About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StaticSection","className","this","props","showTitle","styles","sectionTitle","title","sectionContent","content","React","Component","Home","Deck","Options","About","App","activeClassName","to","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,QAAU,+BAA+B,aAAe,oCAAoC,eAAiB,wC,sLCahHC,E,4JAVX,WACE,OACE,sBAAKC,UAAWC,KAAKC,MAAMF,UAA3B,UACCC,KAAKC,MAAMC,WAAa,qBAAKH,UAAS,UAAKI,IAAOC,cAA1B,SAA2CJ,KAAKC,MAAMI,QAC/E,qBAAKN,UAAWI,IAAOG,eAAvB,SAAwCN,KAAKC,MAAMM,iB,GAL/BC,IAAMC,W,sBCOnBC,EARJ,WACT,OACE,mCACE,oBAAIX,UAAU,UAAd,qBCKSY,EARJ,WACT,OACE,mCACE,oBAAIZ,UAAU,UAAd,qBCKSa,EARD,WACZ,OACE,mCACE,oBAAIb,UAAU,UAAd,wBCKSc,EARH,WACV,OACE,mCACE,oBAAId,UAAU,UAAd,sBC0BSe,MA1Bf,WACE,OACA,sBAAKf,UAAU,iBAAf,UACE,cAAC,EAAD,CAAeG,WAAS,EAACG,MAAM,OAAOE,QAAQ,qCAAqCR,UAAU,mBAC7F,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,yBAAf,UACI,cAAC,IAAD,CAASgB,gBAAgB,OAAOC,GAAG,OAAnC,SAA0C,qBAAKjB,UAAU,cAAf,oBAC1C,cAAC,IAAD,CAASgB,gBAAgB,OAAOC,GAAG,OAAnC,SAA0C,qBAAKjB,UAAU,cAAf,oBAC1C,cAAC,IAAD,CAASgB,gBAAgB,OAAOC,GAAG,UAAnC,SAA6C,qBAAKjB,UAAU,cAAf,uBAC7C,cAAC,IAAD,CAASgB,gBAAgB,OAAOC,GAAG,QAAnC,SAA2C,qBAAKjB,UAAU,cAAf,0BAGjD,qBAAKA,UAAU,kBAAf,0BACA,sBAAKA,UAAU,eAAf,UACM,cAAC,IAAD,CAAOkB,KAAK,QAAQC,OAAK,EAACC,UAAWT,IACrC,cAAC,IAAD,CAAOO,KAAK,QAAQE,UAAWR,IAC/B,cAAC,IAAD,CAAOM,KAAK,WAAWE,UAAWP,IAClC,cAAC,IAAD,CAAOK,KAAK,SAASE,UAAWN,IAChC,cAAC,IAAD,CAAUG,GAAG,aAEnB,qBAAKjB,UAAU,mBAAf,2BACA,cAAC,EAAD,CAAeM,MAAM,SAASE,QAAQ,oBAAoBR,UAAU,uBCdpDqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAeC,SAAS,QAAxB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.6d30b5db.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"StaticSection_section__3t_mr\",\"sectionTitle\":\"StaticSection_sectionTitle__2Claf\",\"sectionContent\":\"StaticSection_sectionContent__2uogt\"};","import React from 'react';\nimport styles from './StaticSection.module.css';\n\nclass StaticSection extends React.Component {\n    render() {\n      return (\n        <div className={this.props.className}>\n        {this.props.showTitle && <div className={`${styles.sectionTitle}`}>{this.props.title}</div> }\n        <div className={styles.sectionContent}>{this.props.content}</div>\n        </div>\n      )\n    }\n  }\n\nexport default StaticSection;","import React from 'react';\n\nlet Home = () => {\n  return(\n    <>\n      <h2 className=\"sptitle\">Home</h2>\n    </>\n    )\n}\n\nexport default Home","import React from 'react';\n\nlet Deck = () => {\n  return(\n    <>\n      <h2 className=\"sptitle\">Deck</h2>\n    </>\n    )\n}\n\nexport default Deck","import React from 'react';\n\nlet Options = () => {\n  return(\n    <>\n      <h2 className=\"sptitle\">Options</h2>\n    </>\n    )\n}\n\nexport default Options","import React from 'react';\n\nlet About = () => {\n  return(\n    <>\n      <h2 className=\"sptitle\">About</h2>\n    </>\n    )\n}\n\nexport default About","import React from 'react';\nimport StaticSection from './features/StaticSection/';\nimport './styles/App.css';\nimport { NavLink, Redirect, Route } from 'react-router-dom';\nimport { Home, Deck, Options, About } from './app/routes';\nfunction App() {\n  return (\n  <div className=\"grid-container\">\n    <StaticSection showTitle title=\"Deck\" content=\"The Incremental Deck Building Game\" className=\"section header\" />\n    <div className=\"section navbar\">\n      <div className=\"grid-row navController\">\n          <NavLink activeClassName=\"open\" to=\"home\"><div className=\"nav navitem\">Home</div></NavLink>\n          <NavLink activeClassName=\"open\" to=\"deck\"><div className=\"nav navitem\">Deck</div></NavLink>\n          <NavLink activeClassName=\"open\" to=\"options\"><div className=\"nav navitem\">Options</div></NavLink>\n          <NavLink activeClassName=\"open\" to=\"about\"><div className=\"nav navitem\">About</div></NavLink>\n      </div>\n    </div>\n    <div className=\"section sb-left\">Sidebar Left</div>\n    <div className=\"section main\">\n          <Route path='/home' exact component={Home} />\n          <Route path='/deck' component={Deck} />\n          <Route path='/options' component={Options} />\n          <Route path='/about' component={About} />\n          <Redirect to='/home' />\n      </div>\n    <div className=\"section sb-right\">Sidebar Right</div>\n    <StaticSection title=\"Footer\" content=\"Colaflaske - 2020\" className=\"section footer\" />\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\n// import { store } from './app/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/deck\">\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}